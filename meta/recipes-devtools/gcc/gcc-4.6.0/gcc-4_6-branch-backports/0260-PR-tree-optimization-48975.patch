From 29bc62bdd8a23a670e844de980879c53a7ab493b Mon Sep 17 00:00:00 2001
From: jakub <jakub@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Thu, 12 May 2011 17:46:15 +0000
Subject: [PATCH] 	PR tree-optimization/48975
 	* tree-if-conv.c (combine_blocks): Call free_bb_predicate
 	on all bbs here and free and clear ifc_bbs at the end.

	* gcc.dg/pr48975.c: New test.


git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_6-branch@173710 138bc75d-0d04-0410-961f-82ee72b054a4

index 81b52db..12ceb8e 100644
new file mode 100644
index 0000000..58658d8
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/pr48975.c
@@ -0,0 +1,18 @@
+/* PR tree-optimization/48975 */
+/* { dg-do compile } */
+/* { dg-options "-O3 -ffast-math -fno-tree-slp-vectorize" } */
+
+static int
+foo (int x)
+{
+  return (x > 0) ? 0 : x + 1;
+}
+
+void
+bar (unsigned int x)
+{
+  int l = 1;
+lab:
+  while (x)
+    x = foo (x);
+}
diff --git a/gcc/tree-if-conv.c b/gcc/tree-if-conv.c
index d70e232..a77186a 100644
--- a/gcc/tree-if-conv.c
+++ b/gcc/tree-if-conv.c
@@ -1604,6 +1604,7 @@ combine_blocks (struct loop *loop)
   for (i = 0; i < orig_loop_num_nodes; i++)
     {
       bb = ifc_bbs[i];
+      free_bb_predicate (bb);
       if (bb_with_exit_edge_p (loop, bb))
 	{
 	  exit_bb = bb;
@@ -1679,6 +1680,9 @@ combine_blocks (struct loop *loop)
       && exit_bb != loop->header
       && can_merge_blocks_p (loop->header, exit_bb))
     merge_blocks (loop->header, exit_bb);
+
+  free (ifc_bbs);
+  ifc_bbs = NULL;
 }
 
 /* If-convert LOOP when it is legal.  For the moment this pass has no
-- 
1.7.0.4

