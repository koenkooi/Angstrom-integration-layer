From 0fdd5e79651b8a9446b6653c66beaee26b67a80a Mon Sep 17 00:00:00 2001
From: rguenth <rguenth@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Tue, 31 May 2011 12:25:52 +0000
Subject: [PATCH] 2011-05-31  Richard Guenther  <rguenther@suse.de>

	Backport from mainline
	2011-05-19  Richard Guenther  <rguenther@suse.de>

	PR middle-end/48985
	* tree-object-size.c (addr_object_size): If the pointed-to
	variable is a decl use DECL_SIZE_UNIT instead of TYPE_SIZE_UNIT.

	* gcc.dg/builtin-object-size-11.c: New testcase.


git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_6-branch@174476 138bc75d-0d04-0410-961f-82ee72b054a4

index d5ea116..ae5689b 100644
new file mode 100644
index 0000000..a98bc35
--- /dev/null
+++ b/gcc/testsuite/gcc.dg/builtin-object-size-11.c
@@ -0,0 +1,21 @@
+/* PR48985 */
+/* { dg-do run } */
+/* { dg-options "-std=gnu89" } */
+
+extern void abort (void);
+
+struct s {
+    int i;
+    char c[];
+} s = { 1, "01234" };
+
+__SIZE_TYPE__ f (void) { return __builtin_object_size (&s.c, 0); }
+
+int
+main()
+{
+  if (f() != sizeof ("01234"))
+    abort ();
+
+  return 0;
+}
diff --git a/gcc/tree-object-size.c b/gcc/tree-object-size.c
index 043b445..41118d2 100644
--- a/gcc/tree-object-size.c
+++ b/gcc/tree-object-size.c
@@ -205,6 +205,12 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,
 	pt_var_size = size_int (sz);
     }
   else if (pt_var
+	   && DECL_P (pt_var)
+	   && host_integerp (DECL_SIZE_UNIT (pt_var), 1)
+	   && (unsigned HOST_WIDE_INT)
+	        tree_low_cst (DECL_SIZE_UNIT (pt_var), 1) < offset_limit)
+    pt_var_size = DECL_SIZE_UNIT (pt_var);
+  else if (pt_var
 	   && (SSA_VAR_P (pt_var) || TREE_CODE (pt_var) == STRING_CST)
 	   && TYPE_SIZE_UNIT (TREE_TYPE (pt_var))
 	   && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1)
-- 
1.7.0.4

