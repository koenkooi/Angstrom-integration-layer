From 4af193055b0dcc204387ba06e11a053c5b55ad15 Mon Sep 17 00:00:00 2001
From: jason <jason@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Tue, 29 Mar 2011 18:47:47 +0000
Subject: [PATCH] 	PR c++/48319
 	* pt.c (value_dependent_expression_p): Handle TEMPLATE_ID_EXPR.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_6-branch@171688 138bc75d-0d04-0410-961f-82ee72b054a4

index d649628..da9365f 100644
--- a/gcc/cp/pt.c
+++ b/gcc/cp/pt.c
@@ -18220,6 +18220,11 @@ value_dependent_expression_p (tree expression)
 	return false;
       }
 
+    case TEMPLATE_ID_EXPR:
+      /* If a TEMPLATE_ID_EXPR involves a dependent name, it will be
+	 type-dependent.  */
+      return type_dependent_expression_p (expression);
+
     default:
       /* A constant expression is value-dependent if any subexpression is
 	 value-dependent.  */
new file mode 100644
index 0000000..1ceeeaf
--- /dev/null
+++ b/gcc/testsuite/g++.dg/cpp0x/dependent1.C
@@ -0,0 +1,25 @@
+// PR c++/48319
+// { dg-options -std=c++0x }
+// We were failing to recognize declval<_Args1> as dependent.
+
+template<typename Tp> Tp declval() noexcept;
+
+template<typename _Tp>
+class __is_constructible_helper
+{
+  typedef char __one;
+  typedef struct { char __arr[2]; } __two;
+
+  template<typename _Tp1, typename... _Args1>
+  static decltype(_Tp1(declval<_Args1>()...), __one()) __test(int);
+
+  template<typename, typename...>
+  static __two __test(...);
+
+public:
+  static const bool __value = sizeof(__test<_Tp>(0)) == 1;
+};
+
+int main() {
+  return __is_constructible_helper<int>::__value;
+}
-- 
1.7.0.4

